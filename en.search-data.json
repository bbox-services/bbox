{"/docs/":{"data":{"bbox-server-documentation#BBOX Server Documentation":"BBOX Server Documentation","components#Components":" BBOX Feature server BBOX Map server BBOX Tile server BBOX Asset server BBOX Processes server BBOX Routing server ","core#Core":" Installation Configuration API Endpoints Instrumentation "},"title":"_index"},"/docs/api-endpoints/":{"data":{"api-endpoints#API Endpoints":"API Endpoints","bbox-api-endpoints#BBOX API Endpoints":" URL Description /health Server health check ","ogc-api-endpoints#OGC API Endpoints":"Services are available via the HTTP GET endpoints:\nURL Description / Landing page (HTML or JSON) /conformance API conforomance /openapi OpenAPI specification (YAML) /openapi.yaml OpenAPI specification (YAML) /openapi.json OpenAPI specification (JSON) Available formats:\nURL Description .json JSON / GeoJSON format .html HTML format, if available ","request-examples#Request examples":"curl -s -H 'Accept: application/json' http://localhost:8080/ | jq . curl -s http://localhost:8080/openapi.json | jq . "},"title":"api-endpoints"},"/docs/asset-server/":{"data":{"bbox-asset-server#BBOX Asset server":"BBOX Asset serverServing static and templated files.\nFeatures:\nConfigurable base directories and endpoints Serve fonts and other assets for Tile services QGIS plugin repository Templates with inputs from path, arguments and configuration ","usage#Usage":"Run feature server with bbox.toml configuration:\nbbox-asset-server serve "},"title":"_index"},"/docs/asset-server/configuration/":{"data":{"asset-server-configuration#Asset server Configuration":"Asset server ConfigurationStatic file serving:\n[[assets.static]] # ./assets/* -\u003e http://localhost:8080/assets/ dir = \"./assets\" path = \"/assets\" Template file serving:\n[[assets.template]] # ./templates/name.html -\u003e http://localhost:8080/html/name/param dir = \"./templates\" path = \"/html\" QGIS plugin repository:\n[[assets.repo]] # ./plugins/*.zip -\u003e http://localhost:8080/qgisrepo/plugins.xml dir = \"./plugins\" path = \"/qgisrepo\" "},"title":"configuration"},"/docs/asset-server/reference/":{"data":{"":""},"title":"reference"},"/docs/core/":{"data":{"":""},"title":"_index"},"/docs/core/configuration/":{"data":{"core-configuration#Core Configuration":"Core ConfigurationConfiguration is read from bbox.toml and environment variables.","webserver#Webserver":" [webserver] # Web server settings # Environment variable prefix: BBOX_WEBSERVER__ server_addr = \"0.0.0.0:8080\" # Default: 127.0.0.1:8080 # worker_threads = 4 # Default: number of CPU cores loglevel = \"Info\" # Error, Warn, Info, Debug, Trace "},"title":"configuration"},"/docs/core/reference/":{"data":{"":""},"title":"reference"},"/docs/feature-server/":{"data":{"bbox-ogc-api-features-service#BBOX OGC API Features Service":"BBOX OGC API Features ServiceAsynchronous OGC API Features server implementation.\nFeatures:\nOGC API - Features - Part 1: Core 1.0 OGC API - Features - Part 2: Coordinate Reference Systems by Reference 1.0 Builtin storage backends: PostGIS, GeoPackage SQL queries with time and custom query parameters Output formats: GeoJSON Compatibility: WFS + WFS-T via QGIS Server ","usage#Usage":"Run feature server with bbox.toml configuration:\nbbox-feature-server serve or with a custom configuration:\nbbox-feature-server --config=bbox-pg.toml serve "},"title":"_index"},"/docs/feature-server/configuration/":{"data":{"collections#Collections":" [[collection]] name = \"populated_places\" title = \"populated places\" description = \"Natural Earth populated places\" [collection.gpkg] datasource = \"ne_extracts\" table = \"ne_10m_populated_places\" With custom SQL query:\n[[collection]] name = \"populated_places_names\" title = \"populated places names\" description = \"Natural Earth populated places\" [collection.gpkg] datasource = \"ne_extracts\" sql = \"SELECT fid, name, geom FROM ne_10m_populated_places\" geometry_field = \"geom\" fid_field = \"fid\" ","collections-with-auto-discovery#Collections with auto discovery":" [[collections.postgis]] url = \"postgresql://mvtbench:mvtbench@127.0.0.1:5439/mvtbench\" [[collections.directory]] dir = \"../data\" ","datasources#Datasources":" [[datasource]] name = \"mvtbenchdb\" [datasource.postgis] url = \"postgresql://mvtbench:mvtbench@127.0.0.1:5439/mvtbench\" [[datasource]] name = \"ne_extracts\" [datasource.gpkg] path = \"../data/ne_extracts.gpkg\" ","feature-server-configuration#Feature server configuration":"Feature server configuration"},"title":"configuration"},"/docs/feature-server/endpoints/":{"data":{"bbox-api-endpoints#BBOX API Endpoints":"BBOX API EndpointsServices are available via the HTTP GET endpoints:\nURL Description /collections List of collections /collections/{name}/items Collection items /collections/{name}/items/{id} Single item ","request-examples#Request examples":"Inspect collections:\nx-www-browser http://127.0.0.1:8080/collections Feature requests:\ncurl -s http://127.0.0.1:8080/collections/populated_places/items | jq . curl -s http://127.0.0.1:8080/collections/populated_places_names/items/2 | jq . "},"title":"endpoints"},"/docs/feature-server/reference/":{"data":{"":""},"title":"reference"},"/docs/installation/":{"data":{"":"","binary-distributions#Binary Distributions":"You can download BBOX from GitHub releases page.\nPlatform Downloads (latest) Linux 64-bit Linux ARM ARM64 macOS 64-bit macOS ARM ARM64 Windows 64-bit ","docker#Docker":"BBOX is also available as a Docker image. You can either share a configuration file from the host with the container via the -v param, or run BBOX in auto-discovery mode.\ndocker run --rm --user=$UID -p 8080:8080 -v $PWD/bbox.toml:/bbox.toml:ro -v $PWD/assets:/assets:ro sourcepole/bbox-server-qgis:v0.6.1 ","installing-with-cargo#Installing with Cargo":"If you install Rust, you can install BBOX from crates.io:\ncargo install bbox-server --locked # or cargo binstall bbox-server bbox-server --help "},"title":"installation"},"/docs/instrumentation/":{"data":{"applications#Applications":"Prometheus https://prometheus.io/\nRun Prometheus:\ndocker run --rm -p 127.0.0.1:9090:9090 -v $PWD/instrumentation/prometheus.yml:/etc/prometheus/prometheus.yml:ro prom/prometheus Test expression browser:\nx-www-browser http://localhost:9090/ Expression example:\nhttp_requests_duration_bucket Jaeger tracing Run jaeger in background:\ndocker run --rm -d -p 6831:6831/udp -p 6832:6832/udp -p 16686:16686 jaegertracing/all-in-one:latest View spans:\nx-www-browser http://localhost:16686/ Grafana https://grafana.com/docs/grafana/\nRun Grafana:\ndocker run -rm -p 127.0.0.1:3000:3000 grafana/grafana Open Grafana:\nx-www-browser http://localhost:3000/ Enter admin for username and password Add Prometheus datasource with URL http://172.17.0.1:9090/ Add Jaeger datasource with URL http://172.17.0.1:16686/ Average request duration:\nrate(http_requests_duration_sum[5m])/rate(http_requests_duration_count[5m]) Request duration 90th percentile\nhistogram_quantile(0.9, rate(http_requests_duration_bucket[5m])) https://www.robustperception.io/how-does-a-prometheus-histogram-work\nWMS Endpoint:\nhttp_requests_duration_sum{endpoint=\"/qgis/{project:.+}\"} ","configuration#Configuration":"Prometheus metrics [metrics.prometheus] # Prometheus metrics endpoint # Environment variable prefix: BBOX_METRICS__PROMETHEUS__ path = \"/metrics\" Jaeger tracing [metrics.jaeger] # Environment variable prefix: BBOX_METRICS__JAEGER__ agent_endpoint = \"localhost:6831\" ","instrumentation#Instrumentation":"Instrumentation"},"title":"instrumentation"},"/docs/map-server/":{"data":{"bbox-map-server#BBOX map server":"BBOX map serverAsynchronous map server with FCGI backend.\nFeatures:\nOGC WMS 1.3 Server OGC API â€“ Maps (Draft) FCGI backends: QGIS Server UNN Mapserver Instrumentation data for WMS backends FCGI dispatcher optimized for WMS requests ","usage#Usage":"Run map server with bbox.toml configuration:\nbbox-map-server serve "},"title":"_index"},"/docs/map-server/configuration/":{"data":{"map-server-configuration#Map Server Configuration":"Map Server Configuration","map-server-settings#Map server settings":" [mapserver] # num_fcgi_processes = 4 # Default: number of CPU cores # wait_timeout = 30000 # FCGI wait timeout in ms. Default: 90s # search_projects = false # Scan directories and build inventory ","qgis-server-settings#QGIS Server settings":" [mapserver.qgis_backend] project_basedir = \"./projects\" # Base dir for project files (.qgs, .qgz) qgs.path = \"/qgis\" # URL base path *.qgs qgz.path = \"/qgz\" # URL base path *.qgz ","umn-mapserver-settings#UMN MapServer settings":" [mapserver.umn_backend] project_basedir = \"./maps\" # Base dir for project files (.map) path = \"/wms/map\" # URL base path "},"title":"configuration"},"/docs/map-server/endpoints/":{"data":{"bbox-api-endpoints#BBOX API Endpoints":"BBOX API EndpointsServices are available via the following HTTP endpoints:\nURL Description /{prefix}/{project} WMS map endpoint with configurable prefix per backend Example configurations:\nURL Description /qgis/{project} QGIS Server backend with *.qgs project files /qgz/{project} QGIS Server backend with *.qgz project files /map/{project} UMN Mapserver backend WMS request examples:\ncurl -s 'http://127.0.0.1:8080/qgis/ne?SERVICE=WMS\u0026REQUEST=GetCapabilities' curl -o /tmp/map.png 'http://127.0.0.1:8080/qgis/ne?SERVICE=WMS\u0026VERSION=1.3.0\u0026REQUEST=GetMap\u0026BBOX=-20037508.34278924391,-5966981.031407224014,19750246.20310878009,17477263.06060761213\u0026CRS=EPSG:900913\u0026WIDTH=1399\u0026HEIGHT=824\u0026LAYERS=country\u0026STYLES=\u0026FORMAT=image/png;%20mode%3D8bit' curl -o /tmp/legend.png 'http://127.0.0.1:8080/qgis/ne?SERVICE=WMS\u0026VERSION=1.3.0\u0026REQUEST=GetLegendGraphic\u0026LAYER=country\u0026FORMAT=image/png\u0026STYLE=default\u0026TRANSPARENT=true' curl -s 'http://127.0.0.1:8080/qgis/helloworld?SERVICE=WMS\u0026REQUEST=GetProjectSettings' curl -o /tmp/print.pdf 'http://127.0.0.1:8080/qgis/helloworld' -X POST \\ -d 'SERVICE=WMS\u0026VERSION=1.3.0\u0026REQUEST=GetPrint\u0026FORMAT=pdf' \\ -d 'TEMPLATE=Composer 1\u0026DPI=300\u0026CRS=EPSG:4326' \\ -d 'map0:LAYERS=Country,Hello\u0026map0:extent=-92.8913,-185.227,121.09,191.872' UMN Mapserver:\ncurl -s 'http://127.0.0.1:8080/wms/map/ne?SERVICE=WMS\u0026REQUEST=GetCapabilities' curl -o /tmp/map.png 'http://127.0.0.1:8080/wms/map/ne?SERVICE=WMS\u0026VERSION=1.3.0\u0026REQUEST=GetMap\u0026BBOX=40.83354209954528358,0.542981257600549938,49.84069885574058389,15.5221558872974672\u0026CRS=epsg:4326\u0026WIDTH=1372\u0026HEIGHT=825\u0026LAYERS=country\u0026STYLES=\u0026FORMAT=image%2Fpng%3B%20mode%3D8bit' WFS request examples:\ncurl -s 'http://127.0.0.1:8080/qgis/ne?SERVICE=WFS\u0026REQUEST=GetCapabilities' curl -s 'http://127.0.0.1:8080/qgis/ne?SERVICE=WFS\u0026REQUEST=GetFeature\u0026VERSION=1.1.0\u0026TYPENAME=country\u0026SRSNAME=EPSG:3857\u0026BBOX=1059483.34824404888786376,5959680.16110791172832251,1061700.73825845750980079,5962445.67000228632241488,EPSG:3857' curl -s --data @wfsadd.xml 'http://127.0.0.1:8080/qgis/ne?SERVICE=WFS\u0026REQUEST=Transaction' "},"title":"endpoints"},"/docs/map-server/reference/":{"data":{"":""},"title":"reference"},"/docs/processes-server/":{"data":{"bbox-processes-service#BBOX Processes Service":"BBOX Processes ServiceThe OGC API - Processes standard specifies an interface for executing computational tasks.\nOverview: https://ogcapi.ogc.org/processes/\nFeatures:\nOGC API - Processes - Part 1: Core Support synchronous and asynchronous process execution OpenAPI endpoint Multiple backend engines Dagster Windmill ","usage#Usage":"Run feature server with bbox.toml configuration:\nbbox-processes-server serve "},"title":"_index"},"/docs/processes-server/configuration/":{"data":{"dagster-backend#Dagster Backend":" [processes.dagster_backend] graphql_url = \"http://localhost:3000/graphql\" repository_name = \"the_repository\" repository_location_name = \"the.repos\" ","processes-service-configuration#Processes Service configuration":"Processes Service configuration"},"title":"configuration"},"/docs/processes-server/endpoints/":{"data":{"bbox-api-endpoints#BBOX API Endpoints":"BBOX API EndpointsServices are available via the following HTTP endpoints:\nURL Description /processes List of available processes /processes/{name}/execution Execute processes /processes/jobs/{jobid} Job status /processes/{jobid}/results Job results ","request-examples#Request examples":"Execute process:\ncurl --header \"Content-Type: application/json\" \\ --request POST \\ --data '{\"inputs\": {\"ops\": {\"pos_info_query\": {\"inputs\": {\"pos_x\": 2607545, \"pos_y\": 1171421}}}}}' \\ http://localhost:8080/processes/pos_info/execution Execute process asynchronous:\ncurl --header \"Content-Type: application/json\" \\ --header \"Prefer: respond-async\" \\ --request POST \\ --data '{\"inputs\": {\"ops\": {\"export_fpds2\": {\"inputs\": {\"fixpunkte\": [\"12575280\", \"12575100\"], \"in_bearbeitung\": false }}}}}' \\ http://localhost:8080/processes/export_fpds2_to_csv/execution JOBID=386f6c55-d718-4160-b4df-afc5ad5c7a73 Get job status:\ncurl http://localhost:8080/jobs/$JOBID Return result of a job:\ncurl http://localhost:8080/jobs/$JOBID/results "},"title":"endpoints"},"/docs/processes-server/reference/":{"data":{"":""},"title":"reference"},"/docs/routing-server/":{"data":{"bbox-routing-service-experimental#BBOX Routing Service (EXPERIMENTAL)":"BBOX Routing Service (EXPERIMENTAL)Routing services with Contraction Hierarchy.\nFeatures:\nOGC API - Routes - Part 1: Core Multiple search APIs OGC API route requests Basic from/to requests Valhalla API compatible requests Builtin storage backends: PostGIS, GeoPackage Extract routing graphs from OSM planet files ","usage#Usage":"Run tile server with bbox.toml configuration:\nbbox-routing-server serve "},"title":"_index"},"/docs/routing-server/configuration/":{"data":{"geopackage-line-geometry-table#GeoPackage line geometry table":" [[routing.service]] profile = \"railway\" gpkg = \"assets/railway-test.gpkg\" table = \"flows\" geom = \"geom\" ","postgis-edgevertices-tables#PostGIS Edge/Vertices tables":" # Node search distance search_dist = 0.01 # Edge table table = \"rail_arcs\" # Node/Vertices table node_table = \"rail_arcs_vertices_pgr\" # Geometry column geom = \"geom\" # Node ID column in node table node_id = \"id\" # Cost column cost = \"cost\" # Column with source node ID node_src = \"source\" # Column with destination (target) node ID node_dst = \"target\" This assumes tables created e.g. with PgRouting pgr_createTopology.\nThe contraction hierarchy is created on first startup and stored as cache files named .graph.bin and .nodes.bin","routing-service-configuration#Routing Service Configuration":"Routing Service Configuration"},"title":"configuration"},"/docs/routing-server/endpoints/":{"data":{"bbox-api-endpoints#BBOX API Endpoints":"BBOX API EndpointsServices are available via the following HTTP endpoints:\nURL Description /routes OGC API endpoint /routes/basic Basic from/to API endpoint /routes/valhalla Valhalla compatible endpoint ","request-examples#Request examples":"OGC API curl -s -X 'POST' \\ 'http://localhost:8080/routes?mode=sync' \\ -H 'accept: application/geo+json' \\ -H 'Content-Type: application/json' \\ -d '{ \"name\": \"Route from A to B\", \"waypoints\": { \"type\": \"MultiPoint\", \"coordinates\": [ [9.35213353, 47.0935012], [9.3422712, 47.1011887] ] }, \"preference\": \"fastest\", \"dataset\": \"OSM\" }' Basic from/to request: curl -s 'http://localhost:8080/routes/basic?profile=railway\u0026from_pos=9.35213353,47.0935012\u0026to_pos=9.3422712,47.1011887' Zurich - Munich:\ncurl -s 'http://localhost:8080/routes/basic?profile=railway\u0026from_pos=8.53636,47.37726\u0026to_pos=11.56096,48.14019' Valhalla endpoint Base URL example for Valhalla QGIS Plugin: http://localhost:8080/routes/valhalla"},"title":"endpoints"},"/docs/routing-server/reference/":{"data":{"":""},"title":"reference"},"/docs/running/":{"data":{"access-web-backend#Access Web Backend":"x-www-browser http://127.0.0.1:8080/ ","command-line-options#Command line options":" Usage: bbox-server [OPTIONS] \u003cCOMMAND\u003e Commands: serve Run service seed Seed tiles upload Upload tiles help Print this message or the help of the given subcommand(s) Options: -c, --config \u003cFILE\u003e Config file (Default: bbox.toml) --loglevel \u003cLOGLEVEL\u003e Log level (Default: info) [possible values: error, warn, info, debug, trace] -t, --t-rex-config \u003cFILE\u003e T-Rex config file -h, --help Print help Usage: bbox-server serve [FILE_OR_URL] Arguments: [FILE_OR_URL] Serve service from file or URL Options: -h, --help Print help ","docker#Docker":"docker run -p 8080:8080 sourcepole/bbox-server-qgis Serve tiles from file:\ndocker run -p 8080:8080 -v $PWD/assets:/assets:ro sourcepole/bbox-server-qgis bbox-server serve /assets/liechtenstein.mbtiles Run with configuration file:\ndocker run -p 8080:8080 -v $PWD/bbox.toml:/var/www/bbox.toml:ro -v $PWD/assets:/var/www/assets:ro sourcepole/bbox-server-qgis ","running-bbox#Running BBOX":"Running BBOX","service-components#Service components":"Service components are included in bbox-server, but can also be run as standalone service:\nbbox-feature-server: Feature server bbox-map-server: Map server bbox-tile-server: Tile Server bbox-asset-server: Asset server bbox-processes-server: Processes server bbox-routing-server: Routing server "},"title":"running"},"/docs/tile-server/":{"data":{"bbox-tile-server#BBOX tile server":"BBOX tile serverMap tile serving and tile cache seeding.\nFeatures:\nOGC API â€“ Tiles - Part 1: Core 1.0 Vector tile server Vector data source: PostGIS Tile archives: MBTiles, PMTiles Raster tile server (Backends: QGIS Server and MapServer) Tile proxy server (WMS backend) XYZ tile service endpoint with TileJSON metadata Support for Custom Tile Matrix Sets OGC WMTS (via map service backend) Tile seeder features:\nParallelized seeding of raster and vector tiles Storage backends: Files, S3, MBTiles, PMTiles ","usage#Usage":"Run tile server with bbox.toml configuration:\nbbox-tile-server serve Run tile server with auto discovery:\nbbox-tile-server serve ../assets/liechtenstein.mbtiles "},"title":"_index"},"/docs/tile-server/configuration/":{"data":{"custom-tile-grid#Custom tile grid":" [[grid]] json = \"assets/custom-grid-lv95.json\" To use the custom tile grid, add the tms name to the tileset:\n[[tileset]] name = \"rivers_lakes\" [[tileset.tms]] id = \"LV95\" ","datasources#Datasources":" [[datasource]] name = \"mvtbenchdb\" [datasource.postgis] url = \"postgresql://mvtbench:mvtbench@127.0.0.1:5439/mvtbench\" [[datasource]] name = \"gebco\" [datasource.wms_proxy] baseurl = \"https://www.gebco.net/data_and_products/gebco_web_services/web_map_service/mapserv?version=1.3.0\" format = \"image/jpeg\" ","raster-tiles-from-map-service#Raster tiles from map service":"QGIS Server backend:\n[[tileset]] name = \"ne_extracts\" map_service = { project = \"ne_extracts\", suffix = \"qgz\", layers = \"ne_extracts\" } cache = \"tilecache\" UMN Mapserver backend:\n[[tileset]] name = \"ne_umn\" map_service = { project = \"ne\", suffix = \"map\", layers = \"country\", tile_size = 512 } Raster tiles from external WMS:\n[[tileset]] name = \"gebco\" wms_proxy = { source = \"gebco\", layers = \"gebco_latest\" } ","tile-caches#Tile caches":" [[tilecache]] name = \"tilecache\" [tilecache.files] base_dir = \"/tmp/tilecache\" [[tilecache]] name = \"aws\" [tilecache.s3] path = \"s3://tiles\" [[tilestore]] name = \"mbtilecache\" [tilestore.mbtiles] path = \"/tmp/tilecache.mbtiles\" [[tilestore]] name = \"pmtilecache\" [tilestore.pmtiles] path = \"/tmp/tilecache.pmtiles\" To use a tilecache when serving tiles, add the tilecache name to the tileset:\n[[tileset]] name = \"ne_countries\" cache = \"tilecache\" ","tile-server-configuration#Tile server configuration":"Tile server configuration","vector-tiles-from-postgis-table#Vector tiles from PostGIS table":" [[tileset]] name = \"ne_countries\" [tileset.postgis] datasource = \"mvtbenchdb\" extent = [-179.97277, -83.05457, 179.99366, 83.23559] attribution = \"Natural Earth v4\" [[tileset.postgis.layer]] name = \"country-name\" #table_name = \"ne_10m_admin_0_country_points\" geometry_type = \"POINT\" buffer_size = 0 [[tileset.postgis.layer.query]] sql = \"\"\"SELECT wkb_geometry, abbrev, name FROM ne_10m_admin_0_country_points\"\"\" "},"title":"configuration"},"/docs/tile-server/endpoints/":{"data":{"bbox-api-endpoints#BBOX API Endpoints":"BBOX API EndpointsServices are available via the following HTTP endpoints:\nURL Description /tiles List of available tilesets /tiles/{tileset} Tileset metadata /map/tiles/{grid}/{z}/{x}/{y} Map tiles endpoint /xyz/{tileset}/{z}/{x}/{y}.{format} XYZ tile endpoint /xyz/{tileset}.json Tilejson endpoint /xyz/{tileset}.style.json Generic Style JSON endpoint /xyz/{tileset}/metadata.json MBTiles metadata JSON ","request-examples#Request examples":"Tile requests:\ncurl -o /tmp/tile.png http://localhost:8080/xyz/ne_extracts/2/2/2.png curl -o /tmp/tile.png http://localhost:8080/xyz/ne_umn/2/2/2.png curl -o /tmp/tile.jpg http://localhost:8080/xyz/gebco/0/0/0.jpeg curl -o /tmp/tile.mvt http://localhost:8080/xyz/mbtiles_mvt_fl/14/8621/5759.mvt curl -o /tmp/tilegz.mvt -H 'Content-Encoding: gzip' http://localhost:8080/xyz/mbtiles_mvt_fl/14/8621/5759.mvt curl -o /tmp/tile.png -H 'Accept: image/png; mode=8bit' http://localhost:8080/map/tiles/WebMercatorQuad/2/2/2 curl -o /tmp/tile.mvt http://localhost:8080/xyz/liechtenstein/14/8621/5759.mvt XYZ URL (Leaflet, QGIS, etc.):\nhttp://localhost:8080/xyz/ne_extracts/{z}/{x}/{y}.png Tilejson requests:\ncurl -s http://localhost:8080/xyz/mbtiles_mvt_fl.json | jq . Style JSON requests:\ncurl -s http://localhost:8080/xyz/mbtiles_mvt_fl.style.json | jq . curl -s http://localhost:8080/xyz/ne_extracts.style.json | jq . Map viewer examples:\nx-www-browser http://127.0.0.1:8080/assets/usergrid.html?debug=1 Map viewer template examples:\nx-www-browser http://localhost:8080/html/maplibre/mbtiles_mvt_fl?style=/assets/mbtiles_mvt_fl-style.json With PostGIS Service:\ndocker run -p 127.0.0.1:5439:5432 -d --name mvtbenchdb --rm sourcepole/mvtbenchdb curl -s http://localhost:8080/xyz/ne_countries.style.json | jq . x-www-browser http://localhost:8080/html/maplibre/ne_countries "},"title":"endpoints"},"/docs/tile-server/guides/":{"data":{"creating-a-custom-grid#Creating a custom grid":"BBOX expects grid definitions according to the OGC Two Dimensional Tile Matrix Set specification found in https://docs.ogc.org/is/17-083r4/17-083r4.html.\nSome reference grids are included in tile-grid.\nIf you canâ€™t find an official grid for your need, you can use morecantile for creating a quadratic custom grid.\nFirst you have to know the spatial reference of your grid. Find it e.g. on https://spatialreference.org/\nThen you have to know the corners of your grid in the grid projection. If you know them in an other reference system, you can use the Proj cli tool cs2cs to transform the known points.\nExample:\necho -90 -180 | cs2cs EPSG:4326 EPSG:8857 -10216474.79 -8392927.60 0.00 echo 0 -180 | cs2cs EPSG:4326 EPSG:8857 -17243959.06 0.00 0.00 With this parameters, you can create a JSON file with the tile grid description.\nExample:\nmorecantile custom --epsg 8857 --extent -17243959.06 -17243959.06 17243959.06 17243959.06 --name \"EqualEarthGreenwichWGS84Quad\" --title \"Equal Earth Greenwich WGS84\" | jq . \u003eEqualEarthGreenwichWGS84Quad.json ","guides#Guides":"Guides","migration-from-t-rex#Migration from t-rex":"BBOX tile server has the same concepts as t-rex. Tile services are organized in tilesets containing layers with database tables or zoom level dependent SQL queries.\nMajor differences:\nBBOX provides OGC API Tiles endpoints BBOX has more tile source types, including raster tiles produced by the included map service BBOX uses the PostGIS ST_AsMvt function, but also provides t-rex compatible queries t-rex supports GDAL vector sources for tiles, from which currently only GeoPackages are supported by BBOX t-rex has PostGIS connections on layer level, BBOX has one common source per tileset t-rex supports autodetection of database tables with optional configuration file generation Using the --t-rex-config command line option bbox-tile-server serve supports reading t-rex configuration files. These are converted to a BBOX configuration and printed in the log output. Most features can be automatically translated, for others a warning message is emitted.\nTo create an OGC conformant grid definition, follow the instructions on Creating a custom grid.\nCompatibility options In case the PostGIS ST_AsMvt function produces unwanted results, setting postgis2 to true activates t-rex compatible SQL queries. Other layer options like simplify, tolerance, make_valid and shift_longitude will then have exactly the same effect as in t-rex.","troubleshooting#Troubleshooting":"Inspect tiles with GDAL You can use GDAL with the MVT driver to inspect and convert MVT tiles.\nInspect with ogrinfo:\nogrinfo /tmp/tilecache/ne_countries/0/0/0.pbf INFO: Open of `/tmp/tilecache/ne_countries/0/0/0.pbf' using driver `MVT' successful. 1: country (Multi Polygon) 2: country-name (Point) 3: land-border-country (Multi Line String) 4: state 5: diagnostics-tile (Polygon) 6: diagnostics-label (Point) Inspect a single layer:\nogrinfo /tmp/tilecache/ne_countries/0/0/0.pbf country-name INFO: Open of `/tmp/tilecache/ne_countries/0/0/0.pbf' using driver `MVT' successful. Layer name: country-name Geometry: Point Feature Count: 298 Extent: (-19743990.154174, -15869550.064455) - (19871181.369241, 14852020.343923) Layer SRS WKT: PROJCRS[\"WGS 84 / Pseudo-Mercator\", [...] mvt_id: Integer64 (0.0) abbrev: String (0.0) name: String (0.0) OGRFeature(country-name):0 abbrev (String) = Indo. name (String) = Indonesia POINT (13051775.4537504 -244598.490512565) Convert MVT geometries and properties to GeoJSON:\nogr2ogr -f GeoJSON layer.json /tmp/tilecache/ne_countries/0/0/0.pbf country Inspect tiles with QGIS QGIS is using the GDAL driver to read MVT tiles as a regular geometry source.\nOpen a new project Drag and drop a vector tile (file ending pbf) into the map canvas, or open it in the QGIS Browser Select layers to add Inspect tile services with QGIS QGIS is also able to include an tile service as QGIS layer.\nVector tile services can be added via Layer -\u003e Add Layer -\u003e Add Vector Tile Layer. Add a new generic connection with an URL like http://localhost:8080/xyz/ne_countries/{z}/{x}/{y}.pbf. QGIS also supports adding a style URL.\nRaster tile services can be added via Layer -\u003e Add Layer -\u003e Add XYZ Layer. Add a connection with an URL like http://localhost:8080/xyz/ne_extracts/{z}/{x}/{y}.png.\nRemark: QGIS supports the Web Mercator tile grid only."},"title":"guides"},"/docs/tile-server/installation/":{"data":{"":"","binary-distributions#Binary Distributions":"You can download BBOX tile server from GitHub releases page.\nPlatform Downloads (latest) Linux 64-bit Linux ARM ARM64 macOS 64-bit macOS ARM ARM64 Windows 64-bit ","debian-packages#Debian packages":" Distribution Downloads (latest) Ubuntu Jammy x86_64 Debian Bookworm x86_64 Debian Bullseye x86_64 ","docker#Docker":"BBOX tile server is also available as a Docker image. You can either share a configuration file from the host with the container via the -v param, or you can run BBOX in auto-discover mode.\ndocker run --rm --user=$UID -p 8080:8080 -v $PWD/bbox.toml:/bbox.toml:ro -v $PWD/assets:/assets:ro sourcepole/bbox-server-qgis:v0.6.1 ","installing-with-cargo#Installing with Cargo":"If you install Rust, you can install BBOX from crates.io:\ncargo install bbox-tile-server --locked # or cargo binstall bbox-tile-server bbox-tile-server --help "},"title":"installation"},"/docs/tile-server/reference/":{"data":{"":""},"title":"reference"},"/docs/tile-server/running/":{"data":{"command-line-options#Command line options":" Usage: bbox-tile-server [OPTIONS] \u003cCOMMAND\u003e Commands: serve Run service seed Seed tiles upload Upload tiles help Print this message or the help of the given subcommand(s) Options: -c, --config \u003cFILE\u003e Config file (Default: bbox.toml) --loglevel \u003cLOGLEVEL\u003e Log level (Default: info) [possible values: error, warn, info, debug, trace] -t, --t-rex-config \u003cFILE\u003e T-Rex config file -h, --help Print help Usage: bbox-tile-server serve [FILE_OR_URL] Arguments: [FILE_OR_URL] Serve service from file or URL Options: -h, --help Print help Usage: bbox-tile-server seed [OPTIONS] --tileset \u003cTILESET\u003e [FILE_OR_URL] Arguments: [FILE_OR_URL] Read tiles from file or URL Options: --tileset \u003cTILESET\u003e tile set name --minzoom \u003cMINZOOM\u003e Minimum zoom level --maxzoom \u003cMAXZOOM\u003e Maximum zoom level --tms \u003cTMS\u003e tile matrix set id --extent \u003cEXTENT\u003e Extent minx,miny,maxx,maxy (in grid reference system) --tile-path \u003cTILE_PATH\u003e Base directory for file store --s3-path \u003cS3_PATH\u003e S3 path to upload to (e.g. s3://tiles) --mb-path \u003cMB_PATH\u003e MBTiles path to store tiles --pm-path \u003cPM_PATH\u003e PMTiles path to store tiles --no-store No tile store (for read benchmarks) -t, --threads \u003cTHREADS\u003e Number of threads to use, defaults to number of logical cores --tasks \u003cTASKS\u003e Size of tasks queue for parallel processing --overwrite \u003cOVERWRITE\u003e Overwrite previously cached tiles [possible values: true, false] -h, --help Print help ","running-bbox-tile-server#Running BBOX tile server":"Running BBOX tile server"},"title":"running"},"/docs/tile-server/seeding/":{"data":{"seed-to-mbtiles-archive#Seed to MBTiles archive":"bbox-tile-server seed --mb-path=/tmp/mvtbench.mbtiles --tileset=ne_countries --maxzoom=6 ","seed-to-pmtiles-archive#Seed to PMTiles archive":"bbox-tile-server seed --pm-path=/tmp/mvtbench.pmtiles --tileset=ne_countries --maxzoom=6 ","seed-to-s3-storage#Seed to S3 storage":"Set S3 env vars:\nexport S3_ENDPOINT_URL=\"http://localhost:9000\" export AWS_ACCESS_KEY_ID=miniostorage export AWS_SECRET_ACCESS_KEY=miniostorage Seed raster tiles:\nbbox-tile-server seed --tileset=ne_extracts --s3-path=s3://tiles --maxzoom=5 ","tile-seeding#Tile seeding":"Tile seedingSeed with proxy WMS:\nbbox-tile-server seed --tileset=gebco --tile-path=/tmp/tiles/gebco --maxzoom=2 Seed with embedded map service:\nbbox-tile-server seed --tileset=ne_extracts --tile-path=/tmp/tiles/ne_extracts --maxzoom=2 Seed PostGIS MVT tiles:\nbbox-tile-server seed --tileset=ne_countries --tile-path=/tmp/tiles/ne_countries --maxzoom=2 "},"title":"seeding"},"/docs/tile-server/styling/":{"data":{"#":"Vector Tile stylingUsing Maputnik for MVT styling Download latest public.zip from https://github.com/maputnik/editor/releases Unpack into ../assets/ and rename public to maputnik Open example:\nhttp://localhost:8080/assets/maputnik/index.html?style=http://localhost:8080/assets/maplibre-style.json http://localhost:8080/assets/maputnik/index.html#11.0/47.0944/9.5076 http://localhost:8080/assets/maputnik/index.html?style=http://localhost:8080/xyz/mbtiles_mvt_fl.style.json ","vector-tile-styling#Vector Tile styling":""},"title":"styling"}}