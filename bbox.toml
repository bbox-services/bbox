[webserver]
# Web server settings
# Environment variable prefix: BBOX_WEBSERVER__
# server_addr = "0.0.0.0:8080"  # Default: 127.0.0.1:8080
# tls_cert = "localhost+1.pem"
# tls_key = "localhost+1-key.pem"
# worker_threads = 4  # Default: number of CPU cores
# public_server_url = "http://host.docker.internal:8080" # Default: Request address

#[webserver.cors]
#allow_all_origins = true

#[auth.oidc]
# OIDC Authentication
# Environment variable prefix: BBOX_AUTH__OIDC__
#client_id = "xxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com"
#client_secret = "xxxxxxxxxxxxxxxxxxxxxxxx" # Set with BBOX_AUTH__OIDC__CLIENT_SECRET
#issuer_url = "https://accounts.google.com"

[metrics.prometheus]
# Prometheus metrics endpoint
# Environment variable prefix: BBOX_METRICS__PROMETHEUS__
path = "/metrics"

#[metrics.jaeger] 
# Jaeger tracing
# Environment variable prefix: BBOX_METRICS__JAEGER__
#agent_endpoint = "localhost:6831"

# -- datasources --

[[datasource]]
name = "ne_extracts"
[datasource.gpkg]
path = "../assets/ne_extracts.gpkg"

[[datasource]]
name = "gebco"
[datasource.wms_proxy]
baseurl = "https://www.gebco.net/data_and_products/gebco_web_services/web_map_service/mapserv?version=1.3.0"
format = "image/jpeg"

# -- collections with auto detection --

[[collections.directory]]
dir = "../assets"

# -- collections --

[[collection]]
name = "populated_places"
title = "populated places"
description = "Natural Earth populated places"
[collection.gpkg]
datasource = "ne_extracts"
table_name = "ne_10m_populated_places"

[[collection]]
name = "populated_places_names"
title = "populated places names"
description = "Natural Earth populated places"
[collection.gpkg]
datasource = "ne_extracts"
sql = "SELECT fid, name, geom FROM ne_10m_populated_places"
geometry_field = "geom"
fid_field = "fid"

#[[collection]]
#name = "rivers_lakes"
#title = "rivers lakes"
#description = "Natural Earth rivers lake centerlines"
#[collection.postgis]
#datasource = "t_rex_tests"
#table_schema = "ne"
#table_name = "ne_10m_rivers_lake_centerlines"

#[[collection]]
#name = "rivers_lakes_names"
#title = "rivers lakes names"
#description = "Natural Earth rivers lake centerlines"
#[collection.postgis]
#datasource = "t_rex_tests"
#sql = "SELECT fid, name, wkb_geometry FROM ne.ne_10m_rivers_lake_centerlines"
#geometry_field = "wkb_geometry"
#fid_field = "fid"

[[assets.static]]
# Static file serving
# Env var example: BBOX_ASSETS__STATIC='[{dir="assets",path="/assets"}]'
# ./assets/* -> http://localhost:8080/assets/
dir = "./assets"
path = "/assets"

[[assets.template]]
# Template file serving
# Env var example: BBOX_ASSETS__TEMPLATE='[{dir="templates",path="/html"}]'
# ./templates/name.html -> http://localhost:8080/html/name/param
dir = "./templates"
path = "/html"

[[assets.repo]]
# QGIS plugin repository
# Env var example: BBOX_ASSETS__REPO='[{dir="plugins",path="/qgisrepo"}]'
# ./plugins/*.zip -> http://localhost:8080/qgisrepo/plugins.xml
dir = "./plugins"
path = "/qgisrepo"

[mapserver]
# Map server settings
# Environment variable prefix: BBOX_MAPSERVER__
# num_fcgi_processes = 4     # Default: number of CPU cores
# wait_timeout = 30000       # FCGI wait timeout in ms. Default: 90s
# search_projects = false    # Scan directories and build inventory

[mapserver.qgis_backend]
# QGIS Server settings
# Environment variable prefix: BBOX_MAPSERVER__QGIS_BACKEND__
project_basedir = "../assets"  # Base dir for project files (.qgs, .qgz)
qgs.path = "/qgis"             # WMS URL base path
qgz.path = "/qgz"              # WMS URL base path

[mapserver.umn_backend]
# UMN MapServer settings
# Environment variable prefix: BBOX_MAPSERVER__UMN_BACKEND__
project_basedir = "../assets"  # Base dir for project files (.map)
path = "/wms/map"              # WMS URL base path

#[processes.dagster_backend]
# Dagster backend settings
# Environment variable prefix: BBOX_PROCESSES__DAGSTER_BACKEND__
#graphql_url = "http://localhost:3000/graphql"
#repository_name = "the_repository"
#repository_location_name = "the.repos"

#[[routing.service]]
#profile = "railway"
#gpkg = "../assets/railway-test.gpkg"
#table = "flows"
#geom = "geom"

# -- custom grids --

[[grid]]
json = "../assets/custom-grid-lv95.json"

# -- tile caches --

[[tilestore]]
name = "filecache"
[tilestore.files]
base_dir = "/tmp/tilecache"

#[[tilestore]]
#name = "s3cache"
#[tilestore.s3]
#path = "s3://tiles"

[[tilestore]]
name = "mbtilecache"
[tilestore.mbtiles]
path = "/tmp/tilecache.mbtiles"

#[[tilestore]]
#name = "pmtilecache"
#[tilestore.pmtiles]
#path = "/tmp/tilecache.pmtiles"

# -- tile sets --

[[tileset]]
name = "ne_extracts"
map_service = { project = "ne_extracts", suffix = "qgz", layers = "ne_extracts" }
cache = "filecache"

[[tileset]]
name = "ne_umn"
map_service = { project = "ne", suffix = "map", layers = "country", tile_size = 512 }
cache = "mbtilecache"
#cache = "pmtilecache"

[[tileset]]
name = "gebco"
wms_proxy = { source = "gebco", layers = "gebco_latest" }

[[tileset]]
name = "rivers_lakes"
tms = "LV95"
[tileset.map_service]
project = "ne_extracts"
suffix = "qgz"
layers = "ne_10m_lakes,ne_10m_rivers_lake_centerlines"
params = "transparent=true"

[[tileset]]
name = "mbtiles_mvt_fl"
mbtiles = { path = "../assets/liechtenstein.mbtiles" }

#[[tileset]]
#name = "pmtiles_firenze"
#pmtiles = { path = "../assets/protomaps(vector)ODbL_firenze.pmtiles" }
# curl -o /tmp/tile.mvt.gz http://localhost:8080/xyz/pmtiles_firenze/14/8621/5759.mvt
